<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com?plugins=forms,typography"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <title>Admin Dashboard - Task</title>
</head>
<body class="bg-background text-primary-foreground dark:bg-primary dark:text-primary-foreground">
    <div class="container flex">
        <!-- Sidebar -->
        <%- include('../admin-left-bar') %>

        <!-- Main Content -->
        <div class="flex-1 p-6 space-y-8">
            <!-- Task Assignment Form -->
            <section class="bg-white p-6 rounded-lg shadow-md">
                <h2 class="text-3xl font-bold mb-4 text-gray-800">Assign a New Task</h2>
                <form id="taskForm" class="space-y-4" onsubmit="addTask(event)">
                    <div>
                        <label class="block text-lg font-semibold text-gray-800">Select User</label>
                        <select id="userSelect" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" onchange="displayUserDetails()" required>
                            <option value="">-- Select User --</option>
                            <% employees.forEach(function(employeeRecord) { %>
                                <option
                                    value="<%= employeeRecord.userId %>"
                                    data-designation="<%= employeeRecord.designation %>"
                                ><%= employeeRecord.firstName + " " + employeeRecord.lastName %></option>
                            <% }); %>
                        </select>
                    </div>
                    <div>
                        <label class="block text-lg font-semibold text-gray-800">User ID</label>
                        <input type="text" id="userId" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm text-gray-500 bg-gray-100" readonly>
                    </div>
                    <div>
                        <label class="block text-lg font-semibold text-gray-800">Designation</label>
                        <input type="text" id="userDesignation" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm text-gray-500 bg-gray-100" readonly>
                    </div>
                    <div>
                        <label class="block text-lg font-semibold text-gray-800">Task Title</label>
                        <input type="text" id="taskTitle" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" placeholder="Enter task title" required>
                    </div>
                    <div>
                        <label class="block text-lg font-semibold text-gray-800">Task Description</label>
                        <textarea id="taskDescription" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" rows="3" placeholder="Describe the task..." required></textarea>
                    </div>
                    <div>
                        <label class="block text-lg font-semibold text-gray-800">Due Date</label>
                        <input type="date" id="taskDueDate" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" required>
                    </div>
                    <button type="submit" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-500">Assign Task</button>
                </form>
            </section>

            <!-- Task Status Table -->
            <section class="bg-white p-6 rounded-lg shadow-md">
                <h2 class="text-3xl font-bold mb-4 text-gray-800">Current Task Status</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white border border-gray-200" id="taskTable">
                        <thead>
                            <tr>
                                <th class="px-4 py-2 text-left text-lg font-semibold text-gray-800 border-b">User</th>
                                <th class="px-4 py-2 text-left text-lg font-semibold text-gray-800 border-b">User ID</th>
                                <th class="px-4 py-2 text-left text-lg font-semibold text-gray-800 border-b">Designation</th>
                                <th class="px-4 py-2 text-left text-lg font-semibold text-gray-800 border-b">Task Title</th>
                                <th class="px-4 py-2 text-left text-lg font-semibold text-gray-800 border-b">Description</th>
                                <th class="px-4 py-2 text-left text-lg font-semibold text-gray-800 border-b">Due Date</th>
                                <th class="px-4 py-2 text-left text-lg font-semibold text-gray-800 border-b">Status</th>
                                <th class="px-4 py-2 text-left text-lg font-semibold text-gray-800 border-b"></th>
                            </tr>
                        </thead>
                        <tbody id="taskList">
                            <!-- Task rows go here -->
                        </tbody>
                    </table>
                </div>
            </section>
        </div>
    </div>

    <%- include('../footer') %>

    <script>
        (async function() {
        if (performance.navigation.type == 2) {
            try {
                const response = await fetch('/admin/check-state', { method: 'GET' });
    
                if (!response.ok) {
                    window.location.href = "/admin-login";
                }
            } catch (err) {
                console.log(err);
            }
        }
        })();
        
        // Store employee data passed from server
        const employees = <%- JSON.stringify(employees) %>;

        let tasks = <%- JSON.stringify(tasks) %>;

        // Display user details when selected
        function displayUserDetails() {
            const selectedUserId = document.getElementById("userSelect").value;
            const selectedUser = employees.find(user => user.userId == selectedUserId);
            if (selectedUser) {
                document.getElementById("userId").value = selectedUser.userId;
                document.getElementById("userDesignation").value = selectedUser.designation;
            } else {
                document.getElementById("userId").value = "";
                document.getElementById("userDesignation").value = "";
            }
        }

        // Function to add a new task
        async function addTask(event) {
            event.preventDefault();
            
            const userName = userSelect.options[userSelect.selectedIndex].text;
            const userId = document.getElementById("userId").value;
            const designation = document.getElementById("userDesignation").value;
            const title = document.getElementById("taskTitle").value;
            const description = document.getElementById("taskDescription").value;
            const dueDate = new Date(document.getElementById("taskDueDate").value).toISOString().split('T')[0];
            const assignedDate = new Date().toISOString().split("T")[0]; // Today's date as assigned date

            // Prepare the task data
            const task = {
                name: userName,
                userId: parseInt(userId),
                designation,
                title,
                description,
                assignedDate,
                dueDate,
                status: false // Initialize as "In Progress"
            };

            try {
                // Send POST request to the server
                const response = await fetch('/admin/add-task', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(task)
                });

                if (response.ok) {
                    const result = await response.json();
                    alert(result.message);
                    renderTasks();
                    document.getElementById("taskForm").reset();
                } else {
                    alert("Failed to assign task. Please try again.");
                }
            } catch (error) {
                console.error("Error assigning task:", error);
                alert("An error occurred. Please try again.");
            }
        }

        // Render tasks in the task table
        // Function to render tasks
        async function renderTasks() {
            try {
                const response = await fetch('/admin/tasks');
                const taskList = await response.json();
                
                const taskTableBody = document.getElementById("taskList");
                taskTableBody.innerHTML = "";

                // If no tasks, show a message else print tasks
                if (taskList.length === 0) {
                    taskTableBody.innerHTML = `
                        <tr>
                            <td colspan="8" class="px-4 py-2 text-center text-lg text-gray-500">No Tasks Assigned</td>
                        </tr>
                    `;
                } else {
                    taskList.forEach((task, index) => {
                        const taskRowClass = task.status ? 'bg-green-100' : 'bg-gray-100'; // Add background color based on task status

                        taskTableBody.innerHTML += `
                            <tr class="${taskRowClass}">
                                <td class="px-4 py-2 border-b">${task.name}</td>
                                <td class="px-4 py-2 border-b">${task.userId}</td>
                                <td class="px-4 py-2 border-b">${task.designation}</td>
                                <td class="px-4 py-2 border-b">${task.title}</td>
                                <td class="px-4 py-2 border-b">${task.description}</td>
                                <td class="px-4 py-2 border-b">${new Date(task.dueDate).toISOString().split('T')[0]}</td>
                                <td class="px-4 py-2 border-b">${task.status ? "Completed" : "In Progress"}</td>
                                <td class="px-4 py-2 border-b">
                                    <button class="bg-yellow-500 text-white px-2 py-1 rounded-md text-xs" onclick="editTask(${index})">Edit</button>
                                    <button class="bg-red-500 text-white px-2 py-1 rounded-md text-xs" onclick="deleteTask(${task.taskId})">Delete</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            } catch (error) {
                console.error("Error loading tasks:", error);
            }
        }

        async function deleteTask(taskId) {
            try {
                const response = await fetch('/admin/delete-task', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ taskId })
                });

                if (response.ok) {
                    renderTasks();
                } else {
                    alert('Failed to delete task. Please try again later.');
                }
            } catch (err) {
                console.error("Error deleting tasks:", error);
            }
        }

        // Initial render
        renderTasks();
    </script>
</body>
</html>